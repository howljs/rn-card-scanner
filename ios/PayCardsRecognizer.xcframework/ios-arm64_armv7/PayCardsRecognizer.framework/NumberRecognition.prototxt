input: "data"
input_dim: 16
input_dim: 1
input_dim: 41
input_dim: 29
name: "79:d4:0e:fd:dc:e0"

layer {
name: "conv1"
type: "Convolution"
bottom: "data"
top: "conv1"
    convolution_param {
    num_output: 16
    kernel_size: 3
    stride: 1
        weight_filler {
        type: "xavier"
        }
        bias_filler {
        type: "constant"
        }
    }
}

layer {
name: "relu1"
type: "ReLU"
bottom: "conv1"
top: "conv1"
}

layer {
name: "conv2"
type: "Convolution"
bottom: "conv1"
top: "conv2"
    convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
        weight_filler {
        type: "xavier"
        }
        bias_filler {
        type: "constant"
        }
    }
}
layer {
name: "relu2"
type: "ReLU"
bottom: "conv2"
top: "conv2"
}

layer {
name: "pool2"
type: "Pooling"
bottom: "conv2"
top: "pool2"
    pooling_param {
    pool: MAX
    kernel_size:3
    stride: 2
    }
}
layer {
name: "conv3"
type: "Convolution"
bottom: "pool2"
top: "conv3"
    convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
        weight_filler {
        type: "xavier"
        }
        bias_filler {
        type: "constant"
        }
    }
}
layer {
name: "relu3"
type: "ReLU"
bottom: "conv3"
top: "conv3"
}

layer {
name: "pool3"
type: "Pooling"
bottom: "conv3"
top: "pool3"
    pooling_param {
    pool: MAX
    kernel_size:2
    stride: 2
    }
}


layer {
name: "conv4"
type: "Convolution"
bottom: "pool3"
top: "conv4"
    convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
        weight_filler {
        type: "xavier"
        }
        bias_filler {
        type: "constant"
        }
    }
}
layer {
name: "relu4"
type: "ReLU"
bottom: "conv4"
top: "conv4"
}

layer {
name: "ip1"
type: "InnerProduct"
bottom: "conv4"
top: "ip1"
    inner_product_param {
    num_output: 128
        weight_filler {
        type: "xavier"
        }
        bias_filler {
        type: "constant"
        }
    }
}
layer {
name: "relu9"
type: "ReLU"
bottom: "ip1"
top: "ip1"
}


layer {
name: "ip2"
type: "InnerProduct"
bottom: "ip1"
top: "ip2"
    inner_product_param {
    num_output: 10
        weight_filler {
        type: "xavier"
        }
        bias_filler {
        type: "constant"
        }
    }
}

layer {
name: "loss"
type: "Softmax"
bottom: "ip2"
top: "loss"
}